# yaml-language-server: $schema=../validator/scraper.schema.json
name: VR pornnow
sceneByURL:
  - action: scrapeXPath
    url:
      - vrpornnow.com/product
      - vrpornnow.com/videos/
    scraper: sceneScraper
xPathScrapers:
  sceneScraper:
    scene:
      Title: //h1
      Details: //p[@id="description"]
      Date:
        selector: //meta[@property="article:published_time"]/@content
        postProcess:
          - parseDate: "2006-01-02T15:04:05-07:00"
      Studio:
        Name:
          fixed: VR pornnow
      Tags:
        Name:
          selector: >-
            //div[@id="tag-list"]/div
            |
            //div[@class="tags inner-container"]//h2
          postProcess:
            - replace:
                # this is a "hack" to use the h2 "Tags" for a fixed value as well as the actual tags
                - regex: Tags
                  with: Virtual Reality
      Performers:
        Name: //div[contains(@class, "actors")]//a
      URL: &urlSel //meta[@property="og:url"]/@content
      Code:
        selector: *urlSel
        postProcess:
          - replace:
              - regex: .*/videos/(\d+).*
                with: $1
      Image:
        selector: //script[@type="application/ld+json"]
        postProcess:
          - javascript: |
              if (value && value.length) {
                // parse JSON
                const obj = JSON.parse(value);
                // find WebPage item
                const webPageItem = obj["@graph"].find(item => item["@type"] === "WebPage");
                // attempt to pick scene ID from image.url
                const regex = new RegExp("/uploads/(\\d+)");
                const matches = regex.exec(webPageItem.image.url);
                if (matches) {
                  const sceneId = matches[1]
                  return `https://www.vrpornnow.com/files/images/${sceneId}/fsk16/${sceneId}_Cover_quer_VR_FSK16.webp`;
                }
              }
              return value
# Last Updated June 12, 2025
